;; manage package loads
(package-initialize)

;; package archives
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
	("melpa" . "http://melpa.org/packages/")
	("melpa-stable" . "http://stable.melpa.org/packages/")))

;; package priorities
(setq package-archive-priorities
      '(("melpa" . 60)
        ("gnu" . 30)
        ("melpa-stable" . 10)))

;; fix copy/paste weirdness
(setq select-active-regions t)
(setq mouse-drag-copy-region nil)
(cua-mode 1)
(global-set-key (kbd "<Super> c") 'cua-copy-region)
(global-set-key (kbd "<Super> x") 'cua-cut-region)
(global-set-key (kbd "<Super> v") 'cua-paste)

;; disable startup noise
(setq exec-path-from-shell-check-startup-files nil)
(setq inhibit-startup-screen t)

;; default window size parameters and centered
(let* ((height 60)
       (width 120)
       (top 0)
       (left (/ (- (display-pixel-width)
                   (frame-pixel-width))
                4)))
  (add-to-list 'default-frame-alist (cons 'height height))
  (add-to-list 'default-frame-alist (cons 'width width))
  (add-to-list 'default-frame-alist (cons 'top top))
  (add-to-list 'default-frame-alist (cons 'left left)))

;; split into 2 columns
;(split-window-horizontally)

;; strip away stuff
(tool-bar-mode 0)
(setq ring-bell-function 'ignore)
(scroll-bar-mode 0)
(fringe-mode 0)
(blink-cursor-mode 0)
(setq-default cursor-type '(bar . 4))
(set-cursor-color "hotpink")
(setq cursor-in-non-selected-windows nil)
(setq make-pointer-invisible t)
(setq-default indent-tabs-mode nil)
(set-face-background 'vertical-border "#eaeaea")
(set-face-foreground 'vertical-border (face-background 'vertical-border))

;; show line numbers on the left
;(global-linum-mode 1)
;(setq linum-delay t)
(require 'nlinum)
(global-nlinum-mode t)
;;(setq nlinum-format "%4d ")
(defun my-nlinum-mode-hook ()
  (when nlinum-mode
    (setq-local nlinum-format
                (concat " %" (number-to-string
                              ;; Guesstimate number of buffer lines.
                              (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
                        "d "))))
(add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

;; scrolling to always be a line at a time
(setq scroll-step 1)
(setq scroll-conservatively 1)

;; font
(set-default-font "Consolas-11")

; auto dim other buffers
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))

;; THEMES

;; dark theme
;;(load-theme 'base16-onedark t)
;;(set-face-foreground 'linum "gray17")
;;(set-face-background 'linum "gold")
;;(defface auto-dim-other-buffers-face '((t :background "black"))
;;  "Face (presumably dimmed somehow) for non-current buffers."
;;  :group 'auto-dim-other-buffers)

;; light theme
;;(load-theme 'base16-github t)
(load-theme 'base16-google-light t)
(set-face-foreground 'linum "#888888")
(set-face-background 'linum "#f3f3f3")
(defface auto-dim-other-buffers-face '((t :background "#f0f0f0"))
  "Face (presumably dimmed somehow) for non-current buffers."
  :group 'auto-dim-other-buffers)

;; set global font lock
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; programming conviences
(delete-selection-mode 1)
(show-paren-mode t)

;; turn on autofill (paragraphs) mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; quit saving so damn much
(setq delete-auto-save-files t)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq backup-inhibited t)

;; multi cursor
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)

;; neotree
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-smart-open t)
(setq neo-show-hidden-files t)
(require 'all-the-icons)
(setq neo-theme "icons")
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; decrease neotree font
(defun text-scale-twice ()(interactive)(progn(text-scale-adjust 0)(text-scale-decrease 1.5)))

;; customize neo-tree link colors
(add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))
(set-face-foreground 'neo-dir-link-face "#00a0bb")
(set-face-foreground 'neo-file-link-face "#666666")
(set-face-foreground 'neo-header-face "black")
(set-face-foreground 'neo-root-dir-face "#ff7700")

;; http://www.emacswiki.org/emacs/EmacsSpeaksStatistics
(require 'ess-site)
(setq ess-ask-for-ess-directory nil)
(setq ess-help-own-frame 'one)
(setq ess-local-process-name "R")
(setq ess-style 'Rstudio)
(defun myindent-ess-hook ()
  (setq ess-indent-level 2))
(add-hook 'ess-mode-hook 'myindent-ess-hook)

;; save some disk space
(setq ess-keep-dump-files 'nil)
(setq ess-delete-dump-files t)
(setq ess-mode-silently-save nil)

;; console behavior
(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
;;(setq comint-move-point-for-output t)
(setq ess-eval-visibly nil)
;(setq ess-eval-visibly-p 'nowait)

;; don't save ess hist files
(setq ess-history-file nil)

;; auto complete
(require 'auto-complete)
(global-auto-complete-mode t)
(eval-after-load "auto-complete"
  '(define-key ac-completing-map [return] 'ac-complete))

;; set ess eval to shift enter
(defun my-ess-eval ()
  (interactive)
  (if (and transient-mark-mode mark-active)
      (call-interactively 'ess-eval-region)
    (call-interactively 'ess-eval-line-and-step)))

(add-hook 'ess-mode-hook
          '(lambda()
             (local-set-key [(shift return)] 'my-ess-eval)))

;; show file name in title bar
(setq frame-title-format "%b - Emikes")

;;; powerline
(require 'powerline)
(powerline-default-theme)

;; polymode
(autoload 'markdown-mode "markdown-mode" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;;;;; polymode
(require 'poly-R)
(require 'poly-markdown)

;;; MARKDOWN
(add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))

;;; R related modes
(add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
(add-to-list 'auto-mode-alist '("\\.rmarkdown" . poly-markdown+r-mode))

(provide 'polymode-configuration)

;; smart underscore
(setq ess-S-assign " <- ")
(setq ess-my-smart-key ":")

;; latex engine
(setq-default TeX-engine 'xetex)
;; And add this if you want a PDF output by default:
(setq-default TeX-PDF-mode t)

;; Set default R version, (i.e. the one launched by typing M-x R <RET>)
(setq inferior-R-program-name "/usr/local/bin/R")

;; Auto assignment behavior
(defun ess-insert-S-assign-mod ()
  (interactive)
  (let ((ess-S-assign " <- ") (assign-len (length ess-S-assign))) 
    (if (and
	 (>= (point) (+ assign-len (point-min)))
	 (save-excursion
	   (backward-char assign-len)
	   (looking-at ess-S-assign)))
	(progn
	  (delete-char (- assign-len))
	  (insert ess-my-smart-key))
      (delete-horizontal-space)
      (insert ess-S-assign))))

(defun ess-smart-lt ()
  (interactive)
  (if (or (looking-at ess-S-assign)
	  (ess-inside-string-or-comment-p (point)))
      (insert ess-my-smart-key)
    (ess-insert-S-assign-mod)))

(add-hook 'R-mode-hook (lambda () (local-set-key ess-my-smart-key 'ess-smart-lt)))
(add-hook 'inferior-ess-mode-hook (lambda () (local-set-key ess-my-smart-key 'ess-smart-lt)))
(add-hook 'R-mode-hook (lambda () (local-set-key (kbd "_") 'self-insert-command))) 
(add-hook 'inferior-ess-mode-hook (lambda () (local-set-key (kbd "_") 'self-insert-command)))


;; roxygen defaults
(setq ess-roxy-str "#'")
(setq ess-roxy-fill-param-p t)
(setq ess-roxy-template-alist '(("description" . "\n#' \n#' <description>\n#' ")
				("param" . "")
				("return" . "")
				("examples" . "\n#' ")
				("export" . "")))

;; font lock maximum (latex highlighting)
(global-font-lock-mode t)

;; Remove \"Active processes exist\" queries when killing buffers or exiting emacs
(setq confirm-kill-emacs nil)
(add-hook 'comint-exec-hook 
      (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))

;; autopair
;(electric-pair-mode 1)
;(setq electric-pair-preserve-balance nil)
(require 'smartparens-config)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(custom-safe-themes
   (quote
    ("6145e62774a589c074a31a05dfa5efdf8789cf869104e905956f0cbd7eda9d0e" "aea30125ef2e48831f46695418677b9d676c3babf43959c8e978c0ad672a7329" "36746ad57649893434c443567cb3831828df33232a7790d232df6f5908263692" default)))
 '(ess-R-font-lock-keywords
   (quote
    ((ess-R-fl-keyword:modifiers)
     (ess-R-fl-keyword:fun-defs)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers . t)
     (ess-fl-keyword:operators . t)
     (ess-fl-keyword:delimiters)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op%))))
 '(ess-default-style (quote RStudio))
 '(ess-help-own-frame nil)
 '(ess-help-pop-to-buffer t)
 '(ess-help-reuse-window t)
 '(ess-tab-complete-in-script t)
 '(font-latex-deactivated-keyword-classes nil)
 '(imenu-use-popup-menu nil)
 '(package-selected-packages
   (quote
    (smartparens nlinum ess neotree auto-dim-other-buffers all-the-icons memoize auctex-latexmk yasnippet with-editor s powerline polymode pkg-info parsebib multiple-cursors math-symbol-lists markdown-mode key-chord ivy helm font-lock+ flx ess-smart-underscore ecb color-theme-sanityinc-tomorrow biblio-core base16-theme autopair auto-package-update auto-complete auctex)))
 '(word-wrap t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(linum ((t (:background "#f3f3f3" :foreground "#999999" :height 80)))))
